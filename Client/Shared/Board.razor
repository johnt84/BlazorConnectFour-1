@inject GameState State

<nav>
	<span @onclick="() => PlayPiece(1)">🔽</span>
	<span @onclick="() => PlayPiece(2)">🔽</span>
	<span @onclick="() => PlayPiece(3)">🔽</span>
	<span @onclick="() => PlayPiece(4)">🔽</span>
	<span @onclick="() => PlayPiece(5)">🔽</span>
	<span @onclick="() => PlayPiece(6)">🔽</span>
	<span @onclick="() => PlayPiece(7)">🔽</span>
</nav>

<article>
	@WinnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
	<br/>
	<span class="alert-danger">@ErrorMessage</span>
</article>

<div>


<div class="board">

		@for (var i=0;i<42;i++) {
			<span class="container"><span></span></span>
		}
	
</div>

	@for (var i=0; i<42; i++)
	{
		<span class="@PieceClasses[i]"></span>
	}


</div>
@code {

	private string[] PieceClasses = new string[42];

	private string WinnerMessage = string.Empty;

	private string ErrorMessage = string.Empty;

	private string ResetStyle = "display: none;";

	protected override void OnInitialized()
	{

		State.ResetBoard();

		base.OnInitialized();

	}

	private void PlayPiece(byte col)
	{

		ErrorMessage = string.Empty;

		try
		{
			var landingSpot = State.PlayPiece(col);
			var cssClass = $"player{State.PlayerTurn} col{col} drop{State.ConvertLandingSpotToRow(landingSpot) + 1}";
			PieceClasses[State.CurrentTurn - 1] = cssClass;
		} catch (ArgumentException ex)
		{
			ErrorMessage = ex.Message;
		}

		WinnerMessage = State.CheckForWin() switch
		{
			1 => "Player 1 Wins!",
			2 => "Player 2 Wins!",
			3 => "It's a tie!",
			_ => ""
		};
		if (WinnerMessage!= string.Empty) ResetStyle = string.Empty;

	}

	void ResetGame()
	{
		State.ResetBoard();
		ResetStyle = "display: none;";
		WinnerMessage = string.Empty;
		ErrorMessage = string.Empty;
		PieceClasses = new string[42];
	}

}
